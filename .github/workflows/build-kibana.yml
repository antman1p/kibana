name: Build and Publish Kibana to GHCR

on:
  push:
    branches:
      - openai_pki_connector_8_15
  pull_request:
    branches:
      - openai_pki_connector_8_15

jobs:
  build:
    runs-on: ubuntu-latest  # GitHub-hosted runner

    steps:
      - name: Checkout Repository and Ensure Correct Branch
        uses: actions/checkout@v4
        with:
          ref: openai_pki_connector_8_15

      - name: Verify Git Branch Being Used
        run: |
          echo "Currently checked out branch:"
          git branch --show-current
          git log --oneline -1

      - name: Read Node.js Version from .node-version
        run: |
          NODE_VERSION=$(cat .node-version | tr -d '[:space:]')
          echo "Using Node.js version: $NODE_VERSION"
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV

      - name: Remove Any Existing Node.js Versions
        run: |
          sudo apt-get remove --purge -y nodejs npm
          sudo rm -rf /usr/local/lib/node_modules
          sudo rm -rf /usr/local/bin/node
          sudo rm -rf /usr/local/include/node
          sudo rm -rf /usr/local/share/man/man1/node.1
          sudo rm -rf /usr/local/lib/node
          sudo rm -rf ~/.npm
          sudo rm -rf ~/.nvm
          echo "Node.js is now removed"

      - name: Install Correct Node.js Version
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Verify Installed Node.js Version
        run: |
          echo "Node.js version after setup:"
          node -v
          which node || echo "Node binary not found"
          ls -l $(which node) || echo "Node path is incorrect"

      - name: Install Yarn Manually
        run: |
          corepack enable
          npm install -g yarn
          yarn -v || echo "Yarn still not found in PATH"

      - name: Ensure Yarn is in PATH
        run: |
          echo "export PATH=$(yarn global bin):$PATH" >> ~/.bashrc
          source ~/.bashrc
          which yarn || echo "Yarn is still missing"
          yarn -v

      - name: Cache Yarn Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.yarn
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: yarn-${{ runner.os }}-

      - name: Verify Kibana Version Being Built
        run: |
          echo "Kibana Version Being Built:"
          cat package.json | grep '"version"'

      - name: Bootstrap Kibana
        run: yarn kbn bootstrap

      - name: Build Only Linux-x86_64 Version
        run: |
          yarn build --release --skip-archives="darwin-x86_64,darwin-aarch64,windows-x86_64,linux-aarch64"

      - name: Log in to GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker Image with Tag 8.15
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/kibana:8.15 .

      - name: Push Docker Image to GHCR
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/kibana:8.15
